//начало текста модуля

///////////////////////////////////////////////////
//Служебная часть
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;

&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;

&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Служебная функция.
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Снипет",Снипет);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста",ПредставлениеТеста);
	Структура.Вставить("Транзакция",Транзакция);
	Структура.Вставить("Параметр",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;
	
	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);
	
	ДобавитьШагВМассивТестов(ВсеТесты,"ФункцияПолучитьФикстуруВозвращаетФайлJson()","ФункцияПолучитьФикстуруВозвращаетФайлJson","Дано Функция *ПолучитьФикстуру* возвращает файл json");
	
	Возврат ВсеТесты;
КонецФункции

&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	ПодключитьИнструмент();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнструмент()
	       ПодключитьИнструментНаСервере();
	
	
	
	//--------------
	//АдресХранилища = "";
	//
	//НачатьПомещениеФайла(Новый ОписаниеОповещения("ПодключитьИнструментЗавершение", ЭтотОбъект), АдресХранилища, ПолноеИмяФайла, Ложь, Новый УникальныйИдентификатор);
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ПодключитьИнструментНаСервере()
	КаталогИнструментов = ПолучитьКаталогИнструментовНаСервере();
	
	ПолноеИмяФайла = КаталогИнструментов + "sbFixturesWriter.epf";
	
	АдресХранилища = "";
	
	ДвоичныеДанныеОбработки = Новый ДвоичныеДанные(ПолноеИмяФайла);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки);
	
	ВнешняяОбработка = ПодключитьВнешнююОбработкуСервер(ПолноеИмяФайла);
	

КонецПроцедуры // ПодключитьИнструментНаСервере()


&НаКлиенте
Процедура ПодключитьИнструментЗавершение(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	Если Результат Тогда
		ВнешняяОбработка = ПодключитьВнешнююОбработкуСервер(АдресХранилища);
		
		ВнешняяОбработка.Тест();

		//ФормаОбработки = ПолучитьФорму("ВнешняяОбработка." + ИмяВнешнейОбработки + ".Форма.Форма",, ЭтаФорма);
		//
		//Контекст.Вставить("ФормаОбработки", ФормаОбработки);
		//
		//юТест.ПроверитьТип(ФормаОбработки, Тип("УправляемаяФорма"), "");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнююОбработкуСервер(АдресХранилища)
	//Возврат ВнешниеОбработки.Подключить(АдресХранилища);
	Возврат ВнешниеОбработки.Создать(АдресХранилища);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКаталогИнструментовНаСервере()
	КаталогStackCommons = Константы.КаталогStackCommons.Получить();
	
	Возврат КаталогStackCommons;
КонецФункции

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Дано Функция *ПолучитьФикстуру* возвращает файл json
//@ФункцияПолучитьФикстуруВозвращаетФайлJson()
Процедура ФункцияПолучитьФикстуруВозвращаетФайлJson() Экспорт
	ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	Контекст = Новый Структура;
	
	ПередНачаломСценария();
КонецПроцедуры

//окончание текста модуля
