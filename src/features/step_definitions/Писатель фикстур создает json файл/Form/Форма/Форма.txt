//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Служебная функция.
Функция ДобавитьШагВМассивТестов(МассивТестов,Снипет,ИмяПроцедуры,ПредставлениеТеста = Неопределено,Транзакция = Неопределено,Параметр = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Снипет",Снипет);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ИмяПроцедуры",ИмяПроцедуры);
	Структура.Вставить("ПредставлениеТеста",ПредставлениеТеста);
	Структура.Вставить("Транзакция",Транзакция);
	Структура.Вставить("Параметр",Параметр);
	МассивТестов.Добавить(Структура);
КонецФункции

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	ДобавитьШагВМассивТестов(ВсеТесты,"ВРезультатеВызоваМетодаВыгрузитьФикстуруСоздаетсяФайлJson()","ВРезультатеВызоваМетодаВыгрузитьФикстуруСоздаетсяФайлJson","Дано В результате вызова метода *Выгрузить фикстуру* создается файл json");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	КаталогИнструментов = ПолучитьКаталогИнструментовНаСервере();
	
	Контекст.Вставить("ПолноеИмяФайлаРезультата", КаталогИнструментов + "examples\test.json");
	Контекст.Вставить("ПолноеИмяФайлаИнструмента", КаталогИнструментов + "sbFixturesWriter.epf");

	НачатьУдалениеФайлов(Новый ОписаниеОповещения("ПередНачаломСценарияЗавершение", ЭтотОбъект), Контекст.ПолноеИмяФайлаРезультата);
КонецПроцедуры

&НаКлиенте
Процедура ПередНачаломСценарияЗавершение(ДополнительныеПараметры) Экспорт
	

	

КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Дано В результате вызова метода *Выгрузить фикстуру* создается файл json
//@ВРезультатеВызоваМетодаВыгрузитьФикстуруСоздаетсяФайлJson()
Процедура ВРезультатеВызоваМетодаВыгрузитьФикстуруСоздаетсяФайлJson() Экспорт
	АдресФайлаВоВременномХранилище = "";
	
	ВыгрузитьФикстуруНаСервере(АдресФайлаВоВременномХранилище, Контекст.ПолноеИмяФайлаИнструмента);
	
	Если Не ПустаяСтрока(АдресФайлаВоВременномХранилище) Тогда
		ПолучитьФайл(АдресФайлаВоВременномХранилище, Контекст.ПолноеИмяФайлаРезультата, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКаталогИнструментовНаСервере()
	КаталогStackCommons = Константы.КаталогStackCommons.Получить();
	
	Возврат КаталогStackCommons;
КонецФункции

&НаСервере
Процедура ВыгрузитьФикстуруНаСервере(АдресФайлаВоВременномХранилище, ПолноеИмяФайлаИнструмента)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("json");
	
	//-----------------------------------------------------
	Инструмент = ВнешниеОбработки.Создать(ПолноеИмяФайлаИнструмента, Ложь);

	Инструмент.ВыгрузитьФикстуру(ИмяВременногоФайла, Новый Массив);
	//-----------------------------------------------------

	Файл = Новый Файл(ИмяВременногоФайла);
	Если Файл.Существует() Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		УдалитьФайлы(ИмяВременногоФайла);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	Контекст = Новый Структура;
	
	ПередНачаломСценария();
	
	ВРезультатеВызоваМетодаВыгрузитьФикстуруСоздаетсяФайлJson();
КонецПроцедуры
